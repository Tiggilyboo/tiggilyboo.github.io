<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Simon Willshire</title>
    <link>http://simonwillshire.com/tags/docker/</link>
    <description>Recent content in Docker on Simon Willshire</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Feb 2018 16:42:00 +1300</lastBuildDate>
    <atom:link href="http://simonwillshire.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatic HTTPS Server using Caddy Reverse-Proxy on Google Kubernetes Engine</title>
      <link>http://simonwillshire.com/blog/caddy-https-kubernetes/</link>
      <pubDate>Tue, 27 Feb 2018 16:42:00 +1300</pubDate>
      <guid>http://simonwillshire.com/blog/caddy-https-kubernetes/</guid>
      <description>Easy HTTPS It has always frustrated me that even the largest companies like Microsoft have had HTTPS certificate renewal issues. With the invention of technologies like Let&amp;rsquo;s Encrypt people can finally not have to pay a fortune for certificates, and renew using its API. To make this process even easier, there are web server&amp;rsquo;s like Caddy that implement this for you. There is no excuse anymore, just do HTTPS from the start.</description>
    </item>
    <item>
      <title>Hey, NativeScript!</title>
      <link>http://simonwillshire.com/blog/nativescript/</link>
      <pubDate>Tue, 03 Oct 2017 13:39:00 -1200</pubDate>
      <guid>http://simonwillshire.com/blog/nativescript/</guid>
      <description>Purpose Right, so you may have seen Ionic, or Cordova based hybrid mobile applications - But you ask yourself, is there a better way to write a cross-platform mobile application in native code without using browser based UI and rendering? Well, Telerik has been developing a solution called NativeSCript - It transpiles good old web code (JS, CSS) or the Angular/Typscript solution into native code. ie. Java (Android) and Swift/Objective C (iOS).</description>
    </item>
    <item>
      <title>Build your own tiny debian docker image</title>
      <link>http://simonwillshire.com/blog/docker-minimal-debian-image/</link>
      <pubDate>Wed, 06 Sep 2017 12:08:00 -1200</pubDate>
      <guid>http://simonwillshire.com/blog/docker-minimal-debian-image/</guid>
      <description>Docker This guide assumes you know the basics to docker and assumes it has been installed. This guide will be using a debian variant host environment.&#xA;TL;DR If you can&amp;rsquo;t be bothered, you can grab my prebuilt 57MB base image by using:&#xA;$ docker pull tiggilyboo/base alternatively use it by creating a dockerfile:&#xA;FROM tiggilyboo/base RUN &amp;lt;some bash commands&amp;gt; CMD [&amp;#34;/bin/bash&amp;#34;] Why? So, no matter what you are hosting on a docker container, a typical image can include all sorts of unneccisary packages - paired with the fact that docker provides a unique overlay file system which is additive, there is no reason to include these packages.</description>
    </item>
    <item>
      <title>Docker Swarm on ARM</title>
      <link>http://simonwillshire.com/blog/docker-swarm-arm-cluster/</link>
      <pubDate>Fri, 01 Apr 2016 18:16:00 -0500</pubDate>
      <guid>http://simonwillshire.com/blog/docker-swarm-arm-cluster/</guid>
      <description>Overview So, a couple years ago when I was studying my bachelors, I did a project for an operating systems course on the ARM big little architecture and scheduling algorithms (You can even read my final paper here). Fast forward a couple years, and I&amp;rsquo;ve still got some ARM boards floating around - After doing some reading into Docker Swarm, I thought I&amp;rsquo;d try it out without virtualizing everything on my main box.</description>
    </item>
  </channel>
</rss>
