<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Simon Willshire</title>
    <link>http://simonwillshire.com/tags/rust/</link>
    <description>Recent content in Rust on Simon Willshire</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Aug 2016 22:53:00 -0500</lastBuildDate>
    <atom:link href="http://simonwillshire.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Rust - Part 3: Writing a Programming Language Parser (Nom)</title>
      <link>http://simonwillshire.com/blog/series/exploring-rust/part-3/</link>
      <pubDate>Tue, 23 Aug 2016 22:53:00 -0500</pubDate>
      <guid>http://simonwillshire.com/blog/series/exploring-rust/part-3/</guid>
      <description>Rust I assume you have already installed it, if not check out the first part of the series.&#xA;Writing Your Own Programming Language parser So, recently I&amp;rsquo;ve been looking into improving/extending a Brainfuck interpreter that I wrote a while back to pick up a little more Rust and eventually write a full compiler. For the purpose of this article, I will be catering the parser towards capturing tokens that pertain to Brainfuck or an extended variant of it, however the concepts are largely the same.</description>
    </item>
    <item>
      <title>Exploring Rust - Part 2: Vulkan API</title>
      <link>http://simonwillshire.com/blog/series/exploring-rust/part-2/</link>
      <pubDate>Sun, 24 Jul 2016 14:54:00 -0400</pubDate>
      <guid>http://simonwillshire.com/blog/series/exploring-rust/part-2/</guid>
      <description>Rust I assume you have already installed it, if not check out the first part of the series. Vulkano recommends v1.9+ as of writing this article.&#xA;Vulkan API Part 2 will look at implementing a binding to the Vulkan API. I&amp;rsquo;m assuming an introduction to the graphics API is not needed, and goes without saying - It&amp;rsquo;s Khronos&amp;rsquo; new graphics API which is intended to replace OpenGL. So, for this post I&amp;rsquo;ll be setting up Vulkan 1.</description>
    </item>
    <item>
      <title>Exploring Rust - Part 1 (Setup: Atom, Racer)</title>
      <link>http://simonwillshire.com/blog/series/exploring-rust/part-1/</link>
      <pubDate>Sat, 14 May 2016 13:06:00 -0400</pubDate>
      <guid>http://simonwillshire.com/blog/series/exploring-rust/part-1/</guid>
      <description>Exploring Rust Everyone seems to be talking about Rust lately, so I&amp;rsquo;d thought I&amp;rsquo;d give it a shot and write something in it. The exploration begins with setting up the rust compiler (rustc), and setting up atom with various rust packages (linter, racer, and syntax highlighting).&#xA;Environment Setup Installing the Rust Compiler (rustc) Fetch the latest stable rust binaries (As of writing this 1.17.0):&#xA;$ curl https://sh.rustup.rs -sSf | sh Rust comes with a language package manager called Cargo, I will be using it to install a package called racer for auto completion in atom.</description>
    </item>
  </channel>
</rss>
